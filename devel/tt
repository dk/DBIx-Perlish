#! /usr/bin/perl
use strict;
use warnings;
use lib qw(lib);
use DBIx::Perlish ':all';
$DBIx::Perlish::Parse::DEVEL = 1;

sub s1 {
	my $x : product_tree;
	$x->circuit_number =~ /^FB_%/;
	$x->id == product_eda_adsl->id;
};

my $val = "god";
sub s2 {
	users->type eq $val,
	users->id == superusers->user_id;
};

my $from = 0;  my $to = 30;
sub s3 {
	my $t : ttt;
	last unless 3..($from*$to);
};

sub s4 {
	my $u : users;
	$u->id / 2 == 21;
	return ($u->name, blah => $u->id);
}

sub funcall {
	my $u : users;
	lower($u->name) eq "hehe";
	return ($u->name, blah => $u->id);
}

sub loneterm1 {
	my $u : users;
	$u->boolvar;
}

sub loneterm2 {
	my $u : users;
	!$u->boolvar;
}

sub loneterm3 {
	my $u : users;
	is_digit($u->id);
}

sub funcall2 {
	my $u : users;
	longfunc($u->name eq "hehe", !$u->boolvar);
}

sub funcall3 {
	my $u : users;
	longfunc($u->name eq "hehe", !$u->boolvar) == 42;
}

sub funcall4 {
	my $u : users;
	lc $u->name eq "hehe";
}

sub outer_ref {
	my $g : groups;
	$g->id <- db_fetch {
		my $u : users;
		$g->name eq $u->gname;
		return ($u->gid);
	};
}

sub outer_ref_exists {
	my $g : groups;
	db_fetch {
		my $u : users;
		$g->name eq $u->gname;
	};
}

sub labels {
	my $u : users;
	order_by: $u->name;
};

sub labels2 {
	my $u : users;
	order_by: $u->lastname, $u->firstname;
};

sub labels3 {
	my $u : users;
	LIMIT: 5;
};

my $off = 42;
sub labels4 {
	my $u : users;
	OFFSET: $off;
};

sub retall {
	my $t1 : table1;
	my $t2 : table2;
	$t1->id == $t2->table1_id;
	return $t1, $t2->name;
};

my $vart = 'table1';
my $self = { table => 'table1', id => 42, col => 'col1',
	h1 => { h2 => { h3 => 42 }},
};
my %self = ( table => 'table1', id => 42, col => 'col1',
	h1 => { h2 => { h3 => 42 }},
);
sub vartable {
	table: my $t1 = $vart;
	my $t2 : table2;
	$t1->id == $t2->table1_id;
	return $t1, $t2->name;
};
sub vartable1 {
	table: my $t1 = $self{table};
	my $t2 : table2;
	$t1->id == $t2->table1_id;
	return $t1, $t2->name;
};
sub vartable2 {
	table: my $t1 = $self->{table};
	my $t2 : table2;
	$t1->id == $t2->table1_id;
	return $t1, $t2->name;
};

sub hashref1 {
	my $t : table1;
	$t->id == $self->{id};
};
sub hashref2 {
	my $t : table1;
	$t->id == $self{id};
};
sub hashref3 {
	my $t : table1;
	$t->id == $self{h1}{h2}{h3};
};

sub funnytable {
	my $t : table = $self->{table};
};

sub shouldfail {
	table: $vart = 52;
};

my $type = "hello"; $type = "";
sub parsetime_if {
	my $t : product;
	$t->name eq $type if $type;
};

my $id = 42;
sub return_expr {
	my $p : product_tree;
	my $e : product_eda_adsl;
	$p->id == $id;
	$p->id == $e->id;

	return (
		$p->id,
		$p->circuit_number,
		$e,
		DAYS_TO_ACTIVATION => $e->ACTIVATION_DATE_START-sysdate(),
		TNIDInstallDate => abs($e->selt_date),
	);
};

sub funcall_no_args { tab->id == sysdate() };

sub verbatim {
	tab->id == sql "some_seq.nextval";
};

sub verbatim2 {
	tab->id == `some_seq.nextval`;
};

sub ret_concat {
	return "foo-" . tab->name . "-moo";
};

sub interp {
	my $t : tab;
	return "foo-$t->name-moo";
};

sub funny_interp {
	my $t : tab;
	return "foo-" . $t->firstname . " $t->lastname-moo";
};

sub interp_ashash {
	my $t : tab;
	return "abc$t->{name}xyz";
};

sub null1 {
	!defined(tab->field);
};

my @ary = (1,2,3);
my $ary = [1,2,3];
sub is1 {
	!tab->id  <-  @$ary;
};

# does not work
sub is2 {
	!tab->id  <-  map { $_*2 } @ary;
};

my $two = 2;
sub is3 {
	!tab->id  <-  [1,$two,3];
};

sub autogroup {
	my $t : tab;
	return $t->name, $t->type, count($t->age);
};

my $x = undef;
sub null_comp {
	tab->age != $x;
};

sub re22 {
	tab->str =~ /^$self->{id}/;
};

sub jj {
	my $t : tbl;
	db_fetch { $t->id == t2->some_id };
};

my $col = 'blah';
sub varcol {
	tbl->$col == 42;
};

sub bad1 {
	$self = { x => 1, y => 2};
};

sub re_in {
	tbl->id =~ /^$col/;
};

sub badupd {
	tbl->id == 42;
};

use Time::HiRes qw(time);
sub timeupd {
	tbl->updated = time;
};

sub plusplus {
	tbl->updated += $self->{id} + 2;
};

sub order1 {
	my $m : measurements;
	$m->duration eq 'month'; order_by: $m->period("desc"), $m->f2;
	return $m->period;
}

my $h = { col1 => 42, col2 => 666 };
my %h = ( col1 => 42, col2 => 666 );
sub upd1 {
	my $m : tabname;
 	$m = {%h};
}

sub retvar
{
	my $t : table = $self->{table};
	return $t->$val;
}

sub prior
{
	my $t : xxx;
	$t->id == 42;
	$t->a == `connect by prior`;
}

sub table_as_select_simple
{
	my $a : tab1;
	my $b : table = db_fetch {
		my $c : tab2;
	};
}

sub table_as_select
{
	my $a : tab1;
	my $b : table = db_fetch {
		my $c : tab2;
		my $d : tab3;

		$c->x == $d->y;
		return $c->i, $d->j;
	};
	$b->i == $a->j;
	return $a->n, $b->j;
}

sub str
{
	my $a : tab;
	$a->y == "hello";
	return $a, constant => "Constant";
}

$x = 1;
sub cond
{
	my $a : tab;
	$a->x == 42 or $a->y == 50 unless $x;
	return $a->a, $a->x if $x;
	return $a->a, $a->nox unless $x;
}

sub order
{
	my $a : tab;
	sort $a->src, desc => $a->dst;
	return $a->id;
}

sub seq_x
{
	return next 'hardware_id_seq';
}

my $tabname = "blah";
sub func_in
{
	my $t : tab;
	$t->x <- pt_forward($id);
}

our $VRF_ID = 42;
sub baah
{
	vrf->ID == $VRF_ID; return vrf->NAME
}

DBIx::Perlish::quirk(oracle => table_func_cast => "pt_forward" => "single_number_table");

sub join_bind
{
	my $x : x;
	my $y : y;
	join $x < $y => db_fetch { $x->blah == "hello" };
}

my $per_sync = '10000';
sub a_z1 { my $t : tabtab; $t->rep_id == 0; sort $t->seq; limit: $per_sync; }

sub lcreg
{
	my $x : x;
	$x->col =~ /AbC/i;
}

my $o;
sub mcall
{
	my $x : x;
	$x->col == $o->method();
}

sub upd
{
	my $t : t;
	$t->x = 42;
	exec;
}

sub ind
{
	my $t : t;
	#return -k $t->id, $t;
	return -k $t->id, -k $t->name;
}

use vars '$global_val', '%global_hash';
$global_val = 42;
#$global_hash{l1} = 42;
$global_hash{l1}{l2} = 42;
our %our_hash;
$our_hash{l1}{l2} = 33;

sub getval
{
	product_tree->product_type_id == $our_hash{l1}{l2};
}

sub extr
{
	my $l : location;
	return $l->expires, utime => extract(epoch => $l->expires);
}

sub tabfunc1
{
	my $h : prod(hosts);
#	defined($h->community) &&
#	($h->id_host_type == 1 || $h->id_host_type == 2);
#	sort $h->fqdn;
#	return $h;
}

sub offset0 {
	my $t : ttt;
	last unless 0..10;
}

sub mat1 {
	my $q : questions_last_asked;
	$q->quiz_id == 1 or ( 0 == 1 );
	return $q->id;
}

sub mat2 {
	my $s : sensors;
	my $z : zones;
	my $d : prod(datacenters);
	my $t : types;

	$t->name == "Temperature"; 
	$d->short_ref == 'eqx';
	join $s x $z => db_fetch { $s->id_zone == $z->id_zone };
	join $z x $d => db_fetch { $z->id_datacenter == $d->id_datacenter };
	join $s x $t => db_fetch { $s->id_type == $t->id_type };
	return $s, $z;
}

sub mat3_strange_join
{
	my $a : taba;
	my $b : tabb;
	my $c : tabc;

	join $a x $b <= db_fetch { $a->id == $b->id };
	join $b x $c <= db_fetch { $b->id == $c->id };
	join $a x $c <= db_fetch { $a->id == $c->id };
}

my $a = 1;
sub mat4
{
	my $p : tabp;
	$p->bugguy == ($a ? "t" : "f");
}

my @a = qw(it does not work for mat);
sub mat5
{
	my $h : ports;
	port_name($h) <- @a;
	return $h;
}

sub join_bug
{
	my $p : product_tree;
	my $m : product_mab_dsl;
	my $pt : product_type;
	my $pp : product_tree;
	my $ppt : product_type;
	my $sb : site_basic;
	my $eda : product_eda_adsl;

	join $p < $sb => db_fetch {
		$p->circuit_number == $sb->circuit_number;
	};

	join $pp < $eda => db_fetch {
		$pp->id == $eda->id;
	};
}

sub mat6
{
	my $h : hosts;
	my $s : services;
	my $hs : host_service;
	join $hs < $s => db_fetch { $hs->id_service == $s->id_service };
	join $h < $s => db_fetch { $h->id_host == $s->id_host };
}

my $q = "abc";
sub tagg1
{
	my $poi : ebsa_poi;
	$poi->name =~ /$q/ ||
		$poi->circuit_number =~ /$q/;
}

my $limit = $ARGV[0] || undef;
sub tagg2
{
	my $e : event_log;
	$e->time < sql("localtimestamp - interval '86 days'");
	return $e->id, $e->circuit_number, time => sql("date_trunc('second', time)"), $e->type;
	if ($limit) {
		last unless 0..$limit;
	}
}

$type = "ICBM";
$type = undef;
sub tagg3
{
	my $t : products;
	if ($type) {
		$t->type eq $type;
	}
}

my @s = qw(search string);
sub repeat
{
	my $t : products;
	for my $s (@s) { $t->descr =~ /$s/; }
}

sub concat
{
	my $t : products;
	return "$t->id + ( a . b )";
}

my %not_a_hash;
sub not_a_hash
{
	my $t : products;
	$t->id == $not_a_hash{level1}{level2};
}

sub selfc
{
	my $u : selfcare_user;
	$u->user_name =~ /^perl-test/;
	return $u->id;
}

my @ids = (1,2,3);
sub unionbug
{
	{
		my $t : tab1;
		$t->id <- @ids;
	} union {
		my $t : tab2;
		my $tt : tab2;
		$t->id == $tt->id;
		$t->id <- @ids;
	}
}

my $hr1 = { x => 'y' };
my %h1 = ( y => 'z' );
sub unionbug2
{
	{
		my $t : tab1;
		$t->id <- @ids;
	} union {
		my $t : tab2;
		my $tt : tab2;
		$t->id == $tt->id;
		$t->id <- @ids;
		$t->x == $hr1->{x};
		$t->y == $h1{y};
	}
}

#my $i = 2;
sub expon { return res => 2**5 }

sub selfmod { tbl->id += 2; }

my @kf;
my ($sql, $v) = DBIx::Perlish::gen_sql(\&selfmod, "select", flavor => 'oracle', key_fields => \@kf);

print "$sql\n";
print "values: ", join ", ", @$v;
print "\n";
print "kf: @kf\n";
print "\n";
