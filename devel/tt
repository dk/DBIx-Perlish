#! /usr/bin/perl
use strict;
use warnings;
use lib qw(lib);
use DBIx::Perlish;
$DBIx::Perlish::Parse::DEVEL = 1;

sub s1 {
	my $x : product_tree;
	$x->circuit_number =~ /^FB-/;
	$x->id == product_eda_adsl->id;
};

my $val = "god";
sub s2 {
	users->type eq $val,
	users->id == superusers->user_id;
};

my $from = 0;  my $to = 30;
sub s3 {
	my $x : users;
	last unless $from..$to;
};

sub s4 {
	my $u : users;
	$u->id / 2 == 21;
	return ($u->name, blah => $u->id);
}

sub funcall {
	my $u : users;
	lower($u->name) eq "hehe";
	return ($u->name, blah => $u->id);
}

sub loneterm1 {
	my $u : users;
	$u->boolvar;
}

sub loneterm2 {
	my $u : users;
	!$u->boolvar;
}

sub loneterm3 {
	my $u : users;
	is_digit($u->id);
}

sub funcall2 {
	my $u : users;
	longfunc($u->name eq "hehe", !$u->boolvar);
}

sub funcall3 {
	my $u : users;
	longfunc($u->name eq "hehe", !$u->boolvar) == 42;
}

sub funcall4 {
	my $u : users;
	lc $u->name eq "hehe";
}

sub outer_ref {
	my $g : groups;
	$g->id <- db_fetch {
		my $u : users;
		$g->name eq $u->gname;
		return ($u->gid);
	};
}

sub outer_ref_exists {
	my $g : groups;
	db_fetch {
		my $u : users;
		$g->name eq $u->gname;
	};
}

sub labels {
	my $u : users;
	order_by: $u->name;
};

sub labels2 {
	my $u : users;
	order_by: $u->lastname, $u->firstname;
};

sub labels3 {
	my $u : users;
	LIMIT: 5;
};

my $off = 42;
sub labels4 {
	my $u : users;
	OFFSET: $off;
};

sub retall {
	my $t1 : table1;
	my $t2 : table2;
	$t1->id == $t2->table1_id;
	return $t1, $t2->name;
};

my $vart = 'table1';
my $self = { table => 'table1', id => 42 };
my %self = ( table => 'table1', id => 42 );
sub vartable {
	table: my $t1 = $vart;
	my $t2 : table2;
	$t1->id == $t2->table1_id;
	return $t1, $t2->name;
};
sub vartable1 {
	table: my $t1 = $self{table};
	my $t2 : table2;
	$t1->id == $t2->table1_id;
	return $t1, $t2->name;
};
sub vartable2 {
	table: my $t1 = $self->{table};
	my $t2 : table2;
	$t1->id == $t2->table1_id;
	return $t1, $t2->name;
};

sub hashref1 {
	my $t : table1;
	$t->id == $self->{id};
};
sub hashref2 {
	my $t : table1;
	$t->id == $self{id};
};

my ($sql, $v) = DBIx::Perlish::gen_sql(\&vartable2, "select");
print "$sql\n";
print "values: ", join ", ", @$v;
print "\n";
